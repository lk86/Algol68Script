general overview of the namespace concept:
    1- can implement interfaces, including default interfaces like returning
        typed variables, unix-style piping, possibly network/file I/O
    2- can provide different functionality in each of those contexts
    3- can define arbitrary functions and act as a library
    4- takes in code which uses custom operators/syntax, and outputs it in one
        or more of the above ways
    5- can define a struct and/or type and/or interfaces which can be exported
        to the parent namespace and/or be used in code sent as input to the namespace

Examples:

```
counter=0
echo counter$+1$
``` > 1

is equivalent to:
```
use math
counter=0
echo counter+1
``` > 1

but also, operators are type-checked so:
```
use math
counter=0
echo counter+1

str="blah"
echo str+1

use string
echo str+1
``` >>>
    1
    Type Error
    string1

Long-form usage:
```
. math
counter=0
echo math::{counter+1}
```> 1

Possible top-level global syntax:
```
. math
counter=0
echo counter.math::{+1}
```> 1
here, the expression math::{+1} returns a unary operator that is executed on counter

something like `counter=.math::{+1}` could apply the unary operator and assign to the existing variable
`counter.math::{+}.some_other_int` also works

effectively . is the syntax for applying any generic operator or function with a given multi-character name

this would do something like assign its left input to $L, and right input to $R, if they exist

This would be generic for all functions that implement the Operator interface.
Other interfaces which would operate similarly are:

Unix-I/O:
$in would be a stdin pipe
$out would be a stdout pipe
$error would be an error pipe

These are basically type signatures, and any function with the corresponding type signature implements this interface.


Conclusion, hopefully:
    Top-level root operators are intended to compose various "standard" interfaces, like to send some string
    as input to a binary-style namespace, or to compose operators from different namespaces. The hope is that
    you could implement a bunch of perl or bash style awful operators that send data between arbitrary
    strictly-typed functions and import them all and write a codeblock in this "language".
